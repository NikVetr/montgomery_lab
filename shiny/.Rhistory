)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "showcase")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
p("p creates a paragraph of text."),
p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
strong("strong() makes bold text."),
em("em() creates italicized (i.e, emphasized) text."),
br(),
code("code displays your text similar to computer code"),
div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
br(),
p("span does the same thing as div, but it works with",
span("groups of words", style = "color:blue"),
"that appear inside a paragraph."),
img(src = "ArnoldBayes.png", width = 300)
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
runApp('App-1')
shinyApp(ui = ui, server = server)
runApp('App-1')
strong("frickin")
strong("frickin")
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
install.packages("shinyBS")
library(shiny)
library(shinyBS)
library(shiny)
library(shinyBS)
# Define UI for app that draws a histogram ----
# ui <- fluidPage(
#   titlePanel("My Shiny App"),
#
#   sidebarLayout(
#     sidebarPanel(h2("Installation"),
#                  p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
#                  code("install.packages(\"shiny\")")),
#     mainPanel(
#
#       p("Shiny is a new package from RStudio that makes it ",
#         em("incredibly ", strong("frickin"), " easy "),
#         "to build interactive web applications with R."),      br(),
#       p("span does the same thing as div, but it works with",
#         span("groups of words", style = "color:blue"),
#         "that appear inside a paragraph."),
#       img(src = "ArnoldBayes.png", width = 300)
#
#     ),
#
#   )
# )
# ui <- fluidPage(
#   titlePanel("censusVis"),
#
#   sidebarLayout(
#     sidebarPanel(p("Create demographic maps with information from the 2010 US Census."),
#                  br(),
#                  selectInput("", label = "Choose a variable to display",
#                              choices = c("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian")),
#                  sliderInput("", "Range of Interest",
#                              min = 0, max = 100, value = c(0, 100))),
#     mainPanel(
#
#       p("Shiny is a new package from RStudio that makes it ",
#         em("incredibly ", strong("frickin"), " easy "),
#         "to build interactive web applications with R."),      br(),
#       p("span does the same thing as div, but it works with",
#         span("groups of words", style = "color:blue"),
#         "that appear inside a paragraph."),
#       img(src = "ArnoldBayes.png", width = 300)
#
#     ),
#
#   )
# )
ui <- fluidPage(
titlePanel("ShinyBS tooltips"),
actionButton("btn", "On hover"),
tipify(actionButton("btn2", "On click"), "Hello again! This is a click-able pop-up", placement="bottom", trigger = "click")
)
server <- function(input, output, session) {
addTooltip(session=session,id="btn",title="Hello! This is a hover pop-up. You'll have to click to see the next one.")
}
# # Define server logic required to draw a histogram ----
# server <- function(input, output) {
#
#
# }
shinyApp(ui = ui, server = server)
runApp('App-1')
getwd()
xy_str
?xy_str
??xy_str
runApp('census-app')
runApp('census-app')
library(shiny)
library(shinyBS)
# Define UI for app that draws a histogram ----
# ui <- fluidPage(
#   titlePanel("My Shiny App"),
#
#   sidebarLayout(
#     sidebarPanel(h2("Installation"),
#                  p("Shiny is available on CRAN, so you can install it in the usual way from your R console:"),
#                  code("install.packages(\"shiny\")")),
#     mainPanel(
#
#       p("Shiny is a new package from RStudio that makes it ",
#         em("incredibly ", strong("frickin"), " easy "),
#         "to build interactive web applications with R."),      br(),
#       p("span does the same thing as div, but it works with",
#         span("groups of words", style = "color:blue"),
#         "that appear inside a paragraph."),
#       img(src = "ArnoldBayes.png", width = 300)
#
#     ),
#
#   )
# )
# ui <- fluidPage(
#   titlePanel("censusVis"),
#
#   sidebarLayout(
#     sidebarPanel(p("Create demographic maps with information from the 2010 US Census."),
#                  br(),
#                  selectInput("", label = "Choose a variable to display",
#                              choices = c("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian")),
#                  sliderInput("", "Range of Interest",
#                              min = 0, max = 100, value = c(0, 100))),
#     mainPanel(
#
#       p("Shiny is a new package from RStudio that makes it ",
#         em("incredibly ", strong("frickin"), " easy "),
#         "to build interactive web applications with R."),      br(),
#       p("span does the same thing as div, but it works with",
#         span("groups of words", style = "color:blue"),
#         "that appear inside a paragraph."),
#       img(src = "ArnoldBayes.png", width = 300)
#
#     ),
#
#   )
# )
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
)
)
server <- function(input, output) {
output$selected_var <- renderText({
"var"
})
}
# # Define server logic required to draw a histogram ----
# server <- function(input, output) {
#
#
# }
shinyApp(ui = ui, server = server)
runApp('census-app')
runExample("04_mpg")
runApp('census-app')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
source("helpers.R")
runApp('census-app')
runApp('census-app')
counties
runApp('census-app')
runApp('census-app')
switch
runApp('census-app')
runApp('App-1')
x1 = input$plot_click$xy1 = input$plot_click$y
runApp()
runApp()
runApp()
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp('App-1')
runApp()
runApp('App-1')
runApp()
runApp('App-1')
runApp('App-1')
runApp('App-1')
library(tibble)
runApp('App-1')
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(
DT::dataTableOutput("irisTable")
),
server = function(input, output) {
output$irisTable <- DT::renderDataTable({
DT::datatable(datasets::iris,
options = list(rowCallback = JS(
"function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {",
"var full_text = aData[1] + ','+ aData[2] + ',' + aData[3] + ','+ aData[4];",
"$('td:eq(5)', nRow).attr('title', full_text);", # Tool Tip
"$('td:eq(5)', nRow).css('cursor', 'pointer');", # Cursor icon changes to hand (pointer) on Hover
"}")
)
)
})
}
)
runApp('App-1')
dist
dist
dist(1:10)
as.matrix(dist(1:10))
as.matrix(dist(1:10. 1:10))
as.matrix(dist(1:10, 1:10))
as.matrix(dist(as.data.frame(1:10, 1:10)))
as.data.frame(1:10, 1:10)
as.data.frame(1:10, 1:10)
as.data.frame(x = 1:10, y = 1:10)
as.data.frame(1:10, 1:10)
as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10))))
which(as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) < 1)
which(as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) < 1, arr.ind = T)
dists <- as.matrix(dist(as.data.frame(cbind(x = xy_new$x, y = xy_new$y))))
which(as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) < 1, arr.ind = T)
which((dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) < 1, arr.ind = T)
which((dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) <>1, arr.ind = T)
which((dist(as.data.frame(cbind(x = 1:10, y = 1:10)))) >1, arr.ind = T)
runApp('App-1')
pts_to_remove
as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10))))
as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10))))
a = as.matrix(dist(as.data.frame(cbind(x = 1:10, y = 1:10))))
diag(a) = Inf
a
unique(c(which(dists < 1, arr.ind = T)))
unique(c(which(a < 1, arr.ind = T)))
runApp('App-1')
n <- 3823
K <- 10
d <- 64
x <- matrix(rnorm(n * d), ncol = n)
centers <- matrix(rnorm(K * d), ncol = K)
system.time(
dists <- apply(centers, 2, function(center) {
colSums((x - center)^2)
})
)
a = cbind(rnorm(100), rnorm(100))
b = rnorm(2)
b
a
a - b
a = cbind(rnorm(10), rnorm(10))
b = rnorm(2)
a - b
a
b
a
b
a - b
a - t(b)
b = rnorm(2)
a - t(b)
a - t(t(b))
a - b
a
b
a[,1] - b[1]
(a[,1] - b[1])^2 + (a[,2] - b[2])^2
sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2)
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2))
a = cbind(rnorm(100), rnorm(100))
b = rnorm(2)
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2))
dist(a)
as.matrix(dist(a))
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), as.matrix(dist(a))
)
a = cbind(rnorm(10), rnorm(10))
b = rnorm(2)
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), as.matrix(dist(a))
)
a = cbind(rnorm(10), rnorm(10))
b = rnorm(2)
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), (dist(a))
)
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), sapply(1:nrow(a) function(x) dist(rbind(a[x,], b))))
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), sapply(1:nrow(a) function(x) dist(rbind(a[x,], b))))
microbenchmark::microbenchmark(sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2), sapply(1:nrow(a), function(x) dist(rbind(a[x,], b))))
sqrt((a[,1] - b[1])^2 + (a[,2] - b[2])^2)
as.matrix(dist(rbind(a,b)))
runApp('App-1')
which(dists < 0.1)
runApp('App-1')
dists = rep(2,10)
dists
pts_to_remove <- which(dists < 0.1)
pts_to_remove
length(pts_to_remove)
runApp('App-1')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinydashboard")
source('~/.active-rstudio-document', echo=TRUE)
runApp('App-1')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
csscode <- HTML("
#messagebutton {
cursor: url(https://avatars.githubusercontent.com/u/47675013?s=280&v=4), auto;
}
")
ui  <- fluidPage(
tags$head(tags$style(csscode)),
actionButton(inputId = 'messagebutton', label = 'click me')
)
server <- function(input, output, session) {}
shinyApp(ui = ui, server = server)
runApp('App-1')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ui <- fluidPage(
selectInput("var_y", "Y-Axis", choices = names(iris)),
plotOutput("distPlot", hover = "plot_hover", hoverDelay = 0),
uiOutput("dynamic")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
req(input$var_y)
ggplot(iris, aes_string("Sepal.Width", input$var_y)) +
geom_point()
})
output$dynamic <- renderUI({
req(input$plot_hover)
verbatimTextOutput("vals")
})
output$vals <- renderPrint({
hover <- input$plot_hover
# print(str(hover)) # list
y <- nearPoints(iris, input$plot_hover)[input$var_y]
req(nrow(y) != 0)
y
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput("var_y", "Y-Axis", choices = names(iris)),
plotOutput("distPlot", hover = "plot_hover", hoverDelay = 0),
uiOutput("dynamic")
)
ui <- fluidPage(
selectInput("var_y", "Y-Axis", choices = names(iris)),
plotOutput("distPlot", hover = "plot_hover", hoverDelay = 0),
uiOutput("dynamic")
)
source('~/.active-rstudio-document', echo=TRUE)
server <- function(input, output) {
output$distPlot <- renderPlot({
req(input$var_y)
ggplot(iris, aes_string("Sepal.Width", input$var_y)) +
geom_point()
})
output$dynamic <- renderUI({
req(input$plot_hover)
verbatimTextOutput("vals")
})
output$vals <- renderPrint({
hover <- input$plot_hover
# print(str(hover)) # list
y <- nearPoints(iris, input$plot_hover)[input$var_y]
req(nrow(y) != 0)
y
})
}
shinyApp(ui = ui, server = server)
runApp('App-1')
runApp()
runApp()
runApp('App-1')
runApp('App-1')
runApp('App-1')
input$plot_hover
runApp('App-1')
runApp()
runApp()
runApp('App-1')
runApp()
runApp('App-1')
runApp()
runApp('App-1')
runApp('App-1')
runApp('App-1')
paste0(css_string, "#distplot {
cursor: pointer;}")
css_string <- "
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
h2 {
font-family: 'Yusei Magic', sans-serif;
}
.shiny-input-container {
color: #474747;
}"
paste0(css_string, "#distplot {
cursor: pointer;}")
cat(paste0(css_string, "#distplot {
cursor: pointer;}"))
runApp('App-1')
css_string
css_string <- "
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
h2 {
font-family: 'Yusei Magic', sans-serif;
}
.shiny-input-container {
color: #474747;
}
#distplot {
cursor: default;}"
css_string <- "
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
h2 {
font-family: 'Yusei Magic', sans-serif;
}
.shiny-input-container {
color: #474747;
}
#distplot {
cursor: default;}"
css_string
runApp('App-1')
ui <- fluidPage(
tags$head(
uiOutput("css")
), #cursor: url(https://emoji.discord.st/emojis/Reddit.png), auto;}
titlePanel("testing out shiny functionality"),
sidebarLayout(
sidebarPanel(width=3,
verbatimTextOutput("info"),
actionButton("reset", "Clear Circles"),
br(), br(),
p("Hovering over the top right square -- at (1,1) -- changes the color of all squares to green.
How can I change the cursor to, say, a pointing hand while that happens?")
),
mainPanel(
uiOutput("plot.ui"),
tableOutput("pointlist")
)
)
runApp('App-1')
runApp('App-1')
class(T)
runApp('App-1')
segments(rnorm(n),rnorm(n),rnorm(n),rnorm(n))
runApp('App-1')
19*19*19*19
runApp('App-1')
runApp("stockVis")
install.packages("quantmod")
runApp("stockVis")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
