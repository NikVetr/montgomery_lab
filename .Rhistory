et$r2 <- rs_bt[sapply(1:nrow(t2_along), function(ri) t2_along[ri, 2 - as.numeric(et$sex2[ri] == et$close_sex[ri])])]
et$concentric <- et$tiss1 != et$tiss2 | et$sex1 != et$sex2
et$opacity <- opacity_nonconcentric_arcs
et$opacity[et$concentric] <- opacity_concentric_arcs
et_bt <- lapply(1:4, function(time) et[et$time1 == time & et$time2 != time & (et$tiss1 %in% tissues_to_include | et$tiss2 %in% tissues_to_include),])
if(no_concentric_arcs){
et_bt <- lapply(1:4, function(time) et_bt[[time]][et_bt[[time]]$tiss1 != et_bt[[time]]$tiss2 | et_bt[[time]]$sex1 != et_bt[[time]]$sex2,])
}
xl <- -3.2; yb <- -0.425; xr <- -2.9; yt <- 0.575;
line_weights <- c(0:10/10)^line_weight_power * line_weight_multiplier
lws <- line_weights / 96 / (par("pin")[1]  / 4)
corresponding_heights <- seq(0,abs(yt - yb)/2,length.out = 11)
hoffset <- 0 + c(5:0/5, 1:5/5)^line_weight_power * line_weight_multiplier / 300
voffset_rhos <- -0.1
et_bt_full <- et_bt
et_wt_full <- et_wt
#### plot the thing already ####
time1 = Sys.time()
tissues_to_include <- tissues[3]
et_bt <- lapply(et_bt_full, function(et_bt_sub) et_bt_sub[et_bt_sub$tiss1 == tissues_to_include,])
et_wt <- lapply(et_wt_full, function(et_wt_sub) et_wt_sub[et_wt_sub$tiss1 == tissues_to_include,])
time2 = Sys.time()
par(mar = c(6,9,5,6), xpd = NA)
plot(1,1,xlim = c(-2,2), ylim = c(-2,2), col = "white", xaxt = "n", yaxt = "n", frame.plot = FALSE, xlab = "", ylab = "")
#plot tissue names
if(!tissue_names_not_colors){
for(time in 1:4){
for(sex in 1:2){
# line(t = aas[[time]][sex], 0, axis.length, col = colours$Sex[sex], lwd = 4, center = centers[[time]])
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = colours$Sex[sex], pch = 18, cex = 2.65*axis.length, center = centers[[time]])
}
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = "white", pch = 18, cex = 1.775*axis.length, center = centers[[time]])
}
}
for(sex in 1:2){
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = colours$Tissue[tissue], pch = 18, cex = 1.775*axis.length, center = centers[[time]])
}
}
if(numbers_in_squares){
for(sex in 1:2){
for(tissue in 1:n_tiss){
cartesian_coordinates <- polar2cart(aas[[time]][sex], rs[tissue]) + centers[[time]]
text(tissue, x = cartesian_coordinates[1], y = cartesian_coordinates[2], col = "white",
srt = c(45,-45,-45,45)[time], adj = 0.5, cex = 0.55, font = 2)
}
}
}
}
} else {
for(time in 1:4){
for(sex in 1:2){
cartesian_coordinates_mat <- t(sapply(1:n_tiss, function(tissue) polar2cart(aas[[time]][sex], rs[tissue]) + centers[[time]]))
name_color = colours$Sex[sex]
tissue_cols_for_labels <- sapply(1:n_tiss, function(tissue) adjustcolor(name_color, ifelse(tissues[tissue] %in% tissues_to_include &
!((nice_names[tissue] == "TESTES" & sex == 2) | (nice_names[tissue] == "OVARY" & sex == 1)), 1, 0.5)))
tissue_cex_for_labels <- sapply(1:n_tiss, function(tissue) 1 / strwidth(nice_names[tissue]) * tissue_name_cex)
text(nice_names, x = cartesian_coordinates_mat[,1], y = cartesian_coordinates_mat[,2],
col = tissue_cols_for_labels, srt = c(-45,45,-45,45)[time], adj = 0.5, cex = tissue_cex_for_labels, font = 2)
}
# for(tissue in 1:n_tiss){
#   cartesian_coordinates <- polar2cart(aas[[time]][sex], rs[tissue]) + centers[[time]]
#   if((nice_names[tissue] == "TESTES" & sex == 2) | (nice_names[tissue] == "OVARY" & sex == 1)){
#     name_color = colours$Sex[sex]
#   } else {
#     name_color = colours$Sex[sex]
#   }
#   text(nice_names[tissue], x = cartesian_coordinates[1], y = cartesian_coordinates[2],
#        col = adjustcolor(name_color, ifelse(tissues[tissue] %in% tissues_to_include &
#                                               !((nice_names[tissue] == "TESTES" & sex == 2) | (nice_names[tissue] == "OVARY" & sex == 1)), 1, 0.5)),
#        srt = c(-45,45,-45,45)[time], adj = 0.5, cex = 1 / strwidth(nice_names[tissue]) * tissue_name_cex, font = 2)
# }
}
}
# my_plot <- recordPlot()
time3 = Sys.time()
time3-time2
#plot arcs within timepoint
for(time in 1:4){
if(nrow(et_wt[[time]]) == 0){next()}
for(ri in 1:nrow(et_wt[[time]])){
arc(t1 = aas[[time]][et_wt[[time]][ri,"theta1"]], t2 = aas[[time]][et_wt[[time]][ri,"theta2"]], r1 = et_wt[[time]][ri,"r1"], center = centers[[time]] * outer_shifter,
r2 = et_wt[[time]][ri,"r2"], lwd = et_wt[[time]]$weight[ri]^line_weight_power * line_weight_multiplier, col = adjustcolor(et_wt[[time]]$color[ri], et_wt[[time]]$opacity[ri]),
random_selfing = F, clockwise_selfing = (et_wt[[time]][ri,"sex1"] == "1") * c(1,-1,1,-1)[time]*-1 + rev(c(0,1,0,1))[time], self_adjust = 0.3)
}
}
for(i in 1:4){
text(c("\u2642", "\u2640", "\u2642", "\u2640")[i], col = c(colours$Sex, colours$Sex)[i],
x = c(0,1,0,-1)[i]*(2 - sqrt(2) + axis.length)*1.15 - c(2,0,-2.15,0)[i] * 0.06,
y = c(1,0,-1,0)[i]*(2 - sqrt(2) + axis.length)*1.275 - c(-1,-1,-1,-1)[i] * 0.06,
cex = 4.5, srt = c(45,90,225,270)[i], pos = 1)
#plot weeks
shadowtext(paste0(c(1,2,4,8), "w")[i], col = colours$Time[i], x = week_label_locs[1,i] + c(-1,1,1,-1)[i]*timelab_nudge,
y = week_label_locs[2,i] + c(1,1,-1,-1)[i]*timelab_nudge, cex = 4,
srt = c(45,-45,235,135)[i], pos = 1)
}
time4 = Sys.time()
#plot adjacent relationships
if(adjacent_relationships){
for(time in 1:4){
for(ri in 1:nrow(et_bt[[time]])){
if(any(et_bt[[time]][ri,"tiw"] == c(1,2))){
t1 = aas_bt[[time]][[et_bt[[time]][ri,"tiw"]]][et_bt[[time]][ri,"theta1"]]
t2 = aas_bt[[time]][[et_bt[[time]][ri,"tiw"]]][et_bt[[time]][ri,"theta2"]]
r1 = et_bt[[time]][ri,"r1"]
r2 = et_bt[[time]][ri,"r2"]
#hack to get around 1w and 8w axes switching -- should probs find more principled solution sometime
if(all(sort(c(et_bt[[time]]$time1[ri], et_bt[[time]]$time2[ri])) == c(1,4))){
tt <- t1; t1 <- t2; t2 <- tt
# rt <- r1; r1 <- r2; r2 <- rt
}
arc(t1 = t1,
t2 = t2,
r1 = r1,
r2 = r2,
center = centers_bt[[time]][et_bt[[time]][ri,"tiw"]][[1]],
lwd = et_bt[[time]]$weight[ri]^line_weight_power * line_weight_multiplier,
col = adjustcolor(et_bt[[time]]$color[ri], et_bt[[time]]$opacity[ri])
)
}
}
}
}
time5 = Sys.time()
if(across_relationships){
for(time in 1:4){
et_bt_across <- et_bt[[time]][et_bt[[time]][,"tiw"] == 3,]
if(nrow(et_bt_across) == 0){
next()
}
for(ri in 1:nrow(et_bt_across)){
cartesian_coordinates_1 <- polar2cart(aas[[as.numeric(et_bt_across$time1[ri])]][as.numeric(et_bt_across$sex1[ri])],
rs[which(tissues == et_bt_across$tiss1[ri])]) + centers[[as.numeric(et_bt_across$time1[ri])]] * inner_shifter
cartesian_coordinates_2 <- polar2cart(aas[[as.numeric(et_bt_across$time2[ri])]][as.numeric(et_bt_across$sex2[ri])],
rs[which(tissues == et_bt_across$tiss2[ri])]) + centers[[as.numeric(et_bt_across$time2[ri])]] * inner_shifter
segments(x0 = cartesian_coordinates_1[1], y0 = cartesian_coordinates_1[2], x1 = cartesian_coordinates_2[1], y1 = cartesian_coordinates_2[2],
lwd = et_bt_across$weight[ri]^line_weight_power * line_weight_multiplier,
col = adjustcolor(et_bt_across$color[ri], et_bt_across$opacity[ri]))
}
}
}
time6 = Sys.time()
text(labels = round(seq(-1, 1, length.out = 11), 2), y = seq(yb, yt, length.out = 11) + voffset_rhos,
x = xl - 0.0075 + hoffset, pos = 4, las=2, cex=0.9)
text(labels = latex2exp::TeX(paste0("$\\rho$")), y = yt - 0.03 + voffset_rhos, x = (xl), pos = 3, cex = 2)
text(labels = paste0("â‰¥ ", corr_thresh), y = yt + 0.0325 + voffset_rhos, x = xl + 0.225, pos = 3, cex = 1.1, font = 3)
polygon(x = c(xl - lws/2, xl + rev(lws)/2),
y = c((yb + yt) / 2 + corresponding_heights, yt - corresponding_heights) + voffset_rhos, col = "#e28a4a")
polygon(x = c(xl - lws/2, xl + rev(lws)/2),
y = c((yb + yt) / 2 - corresponding_heights, yb + corresponding_heights) + voffset_rhos, col = "#2096be")
if(!tissue_names_not_colors){
points(x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), col = colours$Tissue, cex = 2, pch = 15)
if(numbers_in_squares){
text(1:19, x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), col = "white",
adj = 0.5, cex = 0.55, font = 2)
}
text(x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), labels = nice_names, pos = 4, cex = 0.7)
}
# addImg(png::readPNG("~/Pictures/deathrats1.png"), 0, 0, width = 1)
time7 = Sys.time()
diff(c(time1, time2, time3, time4, time5, time6, time7))
#### create shiny app ####
ui <- fluidPage(
tags$head(
uiOutput("css")
), #cursor: url(https://emoji.discord.st/emojis/Reddit.png), auto;}
titlePanel("testing out shiny functionality"),
sidebarLayout(
sidebarPanel(width=3,
verbatimTextOutput("info"),
actionButton("reset", "Clear Circles"),
br(), br(),
p("Hovering over the top right square -- at (1,1) -- changes the color of all squares to green.
How can I change the cursor to, say, a pointing hand while that happens?")
),
mainPanel(
uiOutput("plot.ui"),
tableOutput("pointlist"),
img(src = "ArnoldBayes.png", width = 300)
)
)
)
server <- function(input, output, session) {
options(shiny.maxRequestSize=100*1024^2) # set maximum image size
xy <- reactiveValues(x= numeric(0), y = numeric(0), col = numeric(0), line=numeric(0)) # add new points
square_color <- reactiveValues(col = "red") # add new points
output$css <- renderUI({
if(square_color$col == "green"){
css_string <- "
#mainplot {
cursor: pointer;}"
} else {
css_string <- "
#mainplot {
cursor: default;}"
}
tags$style(HTML(css_string))
})
output$plot.ui <- renderUI({
plotOutput("mainplot", width = "625px", height = "650px",
click = "plot_click",
hover = hoverOpts(
"plot_hover",
delay = 5,
delayType = c("debounce", "throttle"),
clip = TRUE,
nullOutside = TRUE
))
})
# observe hover values and clicks
observe({
if (is.null(input$plot_hover)){
return()
}
if(sqrt((input$plot_hover$x - 1)^2 + (input$plot_hover$y - 1)^2) < 0.125){
square_color$col <- "green"
} else {
square_color$col <- "red"
}
})
observe({
if (is.null(input$plot_click)){
return()
}
isolate({
dists <- sqrt((xy$x - input$plot_click$x)^2 + (xy$y - input$plot_click$y)^2)
pts_to_remove <- which(dists < 0.1)
if(length(pts_to_remove) > 0){
xy$x <- xy$x[-pts_to_remove]
xy$y <- xy$y[-pts_to_remove]
xy$col <- xy$col[-pts_to_remove]
} else{
xy$x <- c(xy$x, input$plot_click$x)
xy$y <- c(xy$y, input$plot_click$y)
xy$col <- c(xy$col, sample(1:10, 1))
}
})
})
#clear all circles when button is pressed
observeEvent(input$reset, {
xy$x= numeric(0)
xy$y= numeric(0)
xy$col= numeric(0)
xy$line= numeric(0)
})
output$mainplot <- renderPlot({
par(xpd = NA, bg = NA)
tissues_to_include <- tissues
# et_bt <- lapply(et_bt_full, function(et_bt_sub) et_bt_sub[et_bt_sub$tiss1 == tissues_to_include,])
# et_wt <- lapply(et_wt_full, function(et_wt_sub) et_wt_sub[et_wt_sub$tiss1 == tissues_to_include,])
et_bt <- et_bt_full
et_wt <- et_wt_full
plot(100,100,xlim = c(-2.5,2.5), ylim = c(-2.5,2.5), col = "white", bg = NA,
xaxt = "n", yaxt = "n", frame.plot = FALSE, xlab = "", ylab = "")
for(time in 1:4){
if(nrow(et_wt[[time]]) == 0){next()}
for(ri in 1:nrow(et_wt[[time]])){
arc(t1 = aas[[time]][et_wt[[time]][ri,"theta1"]], t2 = aas[[time]][et_wt[[time]][ri,"theta2"]], r1 = et_wt[[time]][ri,"r1"], center = centers[[time]] * outer_shifter,
r2 = et_wt[[time]][ri,"r2"], lwd = et_wt[[time]]$weight[ri]^line_weight_power * line_weight_multiplier, col = adjustcolor(et_wt[[time]]$color[ri], et_wt[[time]]$opacity[ri]),
random_selfing = F, clockwise_selfing = (et_wt[[time]][ri,"sex1"] == "1") * c(1,-1,1,-1)[time]*-1 + rev(c(0,1,0,1))[time], self_adjust = 0.3)
}
}
for(i in 1:4){
text(c("\u2642", "\u2640", "\u2642", "\u2640")[i], col = c(colours$Sex, colours$Sex)[i],
x = c(0,1,0,-1)[i]*(2 - sqrt(2) + axis.length)*1.15 - c(2,0,-2.15,0)[i] * 0.06,
y = c(1,0,-1,0)[i]*(2 - sqrt(2) + axis.length)*1.275 - c(-1,-1,-1,-1)[i] * 0.06,
cex = 4.5, srt = c(45,90,225,270)[i], pos = 1)
#plot weeks
shadowtext(paste0(c(1,2,4,8), "w")[i], col = colours$Time[i], x = week_label_locs[1,i] + c(-1,1,1,-1)[i]*timelab_nudge,
y = week_label_locs[2,i] + c(1,1,-1,-1)[i]*timelab_nudge, cex = 4,
srt = c(45,-45,235,135)[i], pos = 1)
}
if(adjacent_relationships){
for(time in 1:4){
for(ri in 1:nrow(et_bt[[time]])){
if(any(et_bt[[time]][ri,"tiw"] == c(1,2))){
t1 = aas_bt[[time]][[et_bt[[time]][ri,"tiw"]]][et_bt[[time]][ri,"theta1"]]
t2 = aas_bt[[time]][[et_bt[[time]][ri,"tiw"]]][et_bt[[time]][ri,"theta2"]]
r1 = et_bt[[time]][ri,"r1"]
r2 = et_bt[[time]][ri,"r2"]
#hack to get around 1w and 8w axes switching -- should probs find more principled solution sometime
if(all(sort(c(et_bt[[time]]$time1[ri], et_bt[[time]]$time2[ri])) == c(1,4))){
tt <- t1; t1 <- t2; t2 <- tt
# rt <- r1; r1 <- r2; r2 <- rt
}
arc(t1 = t1,
t2 = t2,
r1 = r1,
r2 = r2,
center = centers_bt[[time]][et_bt[[time]][ri,"tiw"]][[1]],
lwd = et_bt[[time]]$weight[ri]^line_weight_power * line_weight_multiplier,
col = adjustcolor(et_bt[[time]]$color[ri], et_bt[[time]]$opacity[ri])
)
}
}
}
}
if(!tissue_names_not_colors){
for(time in 1:4){
for(sex in 1:2){
# line(t = aas[[time]][sex], 0, axis.length, col = colours$Sex[sex], lwd = 4, center = centers[[time]])
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = colours$Sex[sex], pch = 18, cex = 2.65*axis.length, center = centers[[time]])
}
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = "white", pch = 18, cex = 1.775*axis.length, center = centers[[time]])
}
}
for(sex in 1:2){
for(tissue in 1:n_tiss){
polarp(t = aas[[time]][sex], r = rs[tissue], col = colours$Tissue[tissue], pch = 18, cex = 1.775*axis.length, center = centers[[time]])
}
}
if(numbers_in_squares){
for(sex in 1:2){
for(tissue in 1:n_tiss){
cartesian_coordinates <- polar2cart(aas[[time]][sex], rs[tissue]) + centers[[time]]
text(tissue, x = cartesian_coordinates[1], y = cartesian_coordinates[2], col = "white",
srt = c(45,-45,-45,45)[time], adj = 0.5, cex = 0.55, font = 2)
}
}
}
}
} else {
for(time in 1:4){
for(sex in 1:2){
cartesian_coordinates_mat <- t(sapply(1:n_tiss, function(tissue) polar2cart(aas[[time]][sex], rs[tissue]) + centers[[time]]))
name_color = colours$Sex[sex]
tissue_cols_for_labels <- sapply(1:n_tiss, function(tissue) adjustcolor(name_color, ifelse(tissues[tissue] %in% tissues_to_include &
!((nice_names[tissue] == "TESTES" & sex == 2) | (nice_names[tissue] == "OVARY" & sex == 1)), 1, 0.5)))
tissue_cex_for_labels <- sapply(1:n_tiss, function(tissue) 1 / strwidth(nice_names[tissue]) * tissue_name_cex)
text(nice_names, x = cartesian_coordinates_mat[,1], y = cartesian_coordinates_mat[,2],
col = tissue_cols_for_labels, srt = c(-45,45,-45,45)[time], adj = 0.5, cex = tissue_cex_for_labels, font = 2)
}
}
}
if(across_relationships){
for(time in 1:4){
et_bt_across <- et_bt[[time]][et_bt[[time]][,"tiw"] == 3,]
if(nrow(et_bt_across) == 0){
next()
}
for(ri in 1:nrow(et_bt_across)){
cartesian_coordinates_1 <- polar2cart(aas[[as.numeric(et_bt_across$time1[ri])]][as.numeric(et_bt_across$sex1[ri])],
rs[which(tissues == et_bt_across$tiss1[ri])]) + centers[[as.numeric(et_bt_across$time1[ri])]] * inner_shifter
cartesian_coordinates_2 <- polar2cart(aas[[as.numeric(et_bt_across$time2[ri])]][as.numeric(et_bt_across$sex2[ri])],
rs[which(tissues == et_bt_across$tiss2[ri])]) + centers[[as.numeric(et_bt_across$time2[ri])]] * inner_shifter
segments(x0 = cartesian_coordinates_1[1], y0 = cartesian_coordinates_1[2], x1 = cartesian_coordinates_2[1], y1 = cartesian_coordinates_2[2],
lwd = et_bt_across$weight[ri]^line_weight_power * line_weight_multiplier,
col = adjustcolor(et_bt_across$color[ri], et_bt_across$opacity[ri]))
}
}
}
text(labels = round(seq(-1, 1, length.out = 11), 2), y = seq(yb, yt, length.out = 11) + voffset_rhos,
x = xl - 0.0075 + hoffset, pos = 4, las=2, cex=0.9)
text(labels = latex2exp::TeX(paste0("$\\rho$")), y = yt - 0.03 + voffset_rhos, x = (xl), pos = 3, cex = 2)
text(labels = paste0("â‰¥ ", corr_thresh), y = yt + 0.0325 + voffset_rhos, x = xl + 0.225, pos = 3, cex = 1.1, font = 3)
polygon(x = c(xl - lws/2, xl + rev(lws)/2),
y = c((yb + yt) / 2 + corresponding_heights, yt - corresponding_heights) + voffset_rhos, col = "#e28a4a")
polygon(x = c(xl - lws/2, xl + rev(lws)/2),
y = c((yb + yt) / 2 - corresponding_heights, yb + corresponding_heights) + voffset_rhos, col = "#2096be")
if(!tissue_names_not_colors){
points(x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), col = colours$Tissue, cex = 2, pch = 15)
if(numbers_in_squares){
text(1:19, x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), col = "white",
adj = 0.5, cex = 0.55, font = 2)
}
text(x = rep(xl, n_tiss), y = seq(yb - 0.25, yb - 0.25 - (yt - yb) / 11 * n_tiss, length.out = n_tiss), labels = nice_names, pos = 4, cex = 0.7)
}
# addImg(png::readPNG("~/Pictures/deathrats1.png"), 0, 0, width = 1)
points(xy$x, xy$y, pch = 19, cex = 2, col = xy$col)
points(x = c(-1,-1,1,1), y = c(-1,1,-1,1), cex = 3, col = square_color$col, pch = 15)
# n=5E3
# if(square_color$col == "green"){
#   segments(rnorm(n),rnorm(n),rnorm(n),rnorm(n))
# }
}, bg = NA)
output$pointlist <- renderTable(data.frame(x = xy$x, y = xy$y, col = xy$col))
output$info <- renderText({
xy_str <- function(e) {
if(is.null(e)) return("NULL\n")
paste0("x=", round(e$x, 2), " y=", round(e$y, 2), "\n")
}
paste0(
"click: ", xy_str(input$plot_click),
"hover: ", xy_str(input$plot_hover)
)
})
}
shinyApp(ui, server)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=400, height=400)
hist(rnorm(input$n))
dev.off()
# Return a list
list(src = outfile,
alt = "This is alternate text")
}, deleteFile = TRUE)
# A dynamically-sized plot
output$plot2 <- renderImage({
# Read plot2's width and height. These are reactive values, so this
# expression will re-run whenever these values change.
width  <- session$clientData$output_plot2_width
height <- session$clientData$output_plot2_height
# A temp file to save the output.
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
hist(rnorm(input$n))
dev.off()
# Return a list containing the filename
list(src = outfile,
width = width,
height = height,
alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=400, height=400)
hist(rnorm(input$n))
dev.off()
# Return a list
list(src = outfile,
alt = "This is alternate text")
}, deleteFile = TRUE)
# A dynamically-sized plot
output$plot2 <- renderImage({
# Read plot2's width and height. These are reactive values, so this
# expression will re-run whenever these values change.
width  <- session$clientData$output_plot2_width
height <- session$clientData$output_plot2_height
# A temp file to save the output.
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
hist(rnorm(input$n))
dev.off()
# Return a list containing the filename
list(src = outfile,
width = width,
height = height,
alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
setwd("~/scripts/montgomery_lab/")
library(shiny)
runApp("corrmat_shiny_app")
setwd("~/scripts/montgomery_lab/")
library(shiny)
runApp("corrmat_shiny_app")
setwd("~/scripts/montgomery_lab/")
library(shiny)
runApp("corrmat_shiny_app")
setwd("~/scripts/montgomery_lab/")
library(shiny)
runApp("corrmat_shiny_app")
setwd("~/scripts/montgomery_lab/")
library(shiny)
runApp("corrmat_shiny_app")
